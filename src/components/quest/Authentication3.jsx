/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

 import React from 'react';
 import { TextField, Button, Link as MUILink } from '@mui/material';
 import { styled } from '@mui/material/styles';
 import useAuthentication3 from './useAuthentication3';
 
 const ScreenDesktop = styled('div', {
   shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
 })(({ theme, data }) => ({
   backgroundColor: `rgba(255, 255, 255, 1)`,
   borderRadius: `0px`,
   display: `flex`,
   position: `relative`,
   isolation: `isolate`,
   flexDirection: `row`,
   width: '100vw',
   justifyContent: `center`,
   alignItems: `flex-start`,
   padding: data.currentVariant === 'ScreenMobile' ? `100px 30px` : `195px 0px`,
   boxSizing: `border-box`,
   overflow: `hidden`,
   height: '100vh',
 }));
 
 const LogIn = styled('div', {
   shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
 })(({ data }) => ({
   borderRadius: `0px`,
   display: `flex`,
   position: `relative`,
   isolation: `isolate`,
   flexDirection: `column`,
   justifyContent: `center`,
   alignItems: `center`,
   padding: `0px`,
   boxSizing: `border-box`,
   alignSelf: `stretch`,
   margin: `0px`,
   overflow: `hidden`,
   flex: data.currentVariant === 'ScreenMobile' ? `1` : 'unset',
 }));
 
 const Top = styled('div', {
   shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
 })(({ data }) => ({
   borderRadius: `0px`,
   display: `flex`,
   position: `relative`,
   isolation: `isolate`,
   flexDirection: `column`,
   justifyContent: `flex-start`,
   alignItems: `center`,
   padding: `0px`,
   boxSizing: `border-box`,
   margin: `0px`,
   alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
 }));
 
 
 const LogInToYourAccount = styled('div', {
   shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
 })(({ theme, data }) => ({
   textAlign: `center`,
   whiteSpace: `pre-wrap`,
   fontSynthesis: `none`,
   color: theme.palette['Text']['Primary'],
   fontStyle:
     data.currentVariant === 'ScreenMobile'
       ? theme.typography['Typography']['H6'].fontStyle
       : theme.typography['Typography']['H4'].fontStyle,
   fontFamily:
     data.currentVariant === 'ScreenMobile'
       ? theme.typography['Typography']['H6'].fontFamily
       : theme.typography['Typography']['H4'].fontFamily,
   fontWeight:
     data.currentVariant === 'ScreenMobile'
       ? theme.typography['Typography']['H6'].fontWeight
       : theme.typography['Typography']['H4'].fontWeight,
   fontSize:
     data.currentVariant === 'ScreenMobile'
       ? theme.typography['Typography']['H6'].fontSize
       : theme.typography['Typography']['H4'].fontSize,
   letterSpacing:
     data.currentVariant === 'ScreenMobile'
       ? theme.typography['Typography']['H6'].letterSpacing
       : theme.typography['Typography']['H4'].letterSpacing,
   lineHeight:
     data.currentVariant === 'ScreenMobile'
       ? theme.typography['Typography']['H6'].lineHeight
       : theme.typography['Typography']['H4'].lineHeight,
   textDecoration:
     data.currentVariant === 'ScreenMobile'
       ? theme.typography['Typography']['H6'].textDecoration
       : theme.typography['Typography']['H4'].textDecoration,
   textTransform:
     data.currentVariant === 'ScreenMobile'
       ? theme.typography['Typography']['H6'].textTransform
       : theme.typography['Typography']['H4'].textTransform,
   margin: `30px 0px 0px 0px`,
 }));
 
 const Sec = styled('div', {
   shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
 })(({ data }) => ({
   borderRadius: `0px`,
   display: `flex`,
   position: `relative`,
   isolation: `isolate`,
   flexDirection: `column`,
   justifyContent: `flex-start`,
   alignItems: `flex-start`,
   padding: `0px`,
   boxSizing: `border-box`,
   margin:
     data.currentVariant === 'ScreenMobile'
       ? `30px 0px 0px 0px`
       : `50px 0px 0px 0px`,
   alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
 }));
 
 const Divider = styled('div', {
   shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
 })(({ data }) => ({
   borderRadius: `0px`,
   display: `flex`,
   position: `relative`,
   isolation: `isolate`,
   flexDirection: `row`,
   justifyContent: `center`,
   alignItems: `center`,
   padding: `0px`,
   boxSizing: `border-box`,
   width: data.currentVariant === 'ScreenMobile' ? 'unset' : `349px`,
   margin: `24px 0px 0px 0px`,
   overflow: `hidden`,
   alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
 }));
 
 const Frame1 = styled('div')(({ theme }) => ({
   backgroundColor: theme.palette['Other']['Divider'],
   borderRadius: `0px`,
   display: `flex`,
   position: `relative`,
   isolation: `isolate`,
   flexDirection: `row`,
   justifyContent: `center`,
   alignItems: `center`,
   flex: `1`,
   height: `2px`,
   margin: `0px`,
   overflow: `hidden`,
 }));
 
 const Or = styled('div')(({ theme }) => ({
   textAlign: `left`,
   whiteSpace: `pre-wrap`,
   fontSynthesis: `none`,
   color: theme.palette['Text']['Primary'],
   fontStyle: theme.typography['Typography']['Caption'].fontStyle,
   fontFamily: theme.typography['Typography']['Caption'].fontFamily,
   fontWeight: theme.typography['Typography']['Caption'].fontWeight,
   fontSize: theme.typography['Typography']['Caption'].fontSize,
   letterSpacing: theme.typography['Typography']['Caption'].letterSpacing,
   lineHeight: theme.typography['Typography']['Caption'].lineHeight,
   textDecoration: theme.typography['Typography']['Caption'].textDecoration,
   textTransform: theme.typography['Typography']['Caption'].textTransform,
   margin: `0px 0px 0px 10px`,
 }));
 
 const Frame2 = styled('div')(({ theme }) => ({
   backgroundColor: theme.palette['Other']['Divider'],
   borderRadius: `0px`,
   display: `flex`,
   position: `relative`,
   isolation: `isolate`,
   flexDirection: `row`,
   justifyContent: `center`,
   alignItems: `center`,
   flex: `1`,
   height: `2px`,
   margin: `0px 0px 0px 10px`,
   overflow: `hidden`,
 }));
 
 const TextFieldStandard = styled(TextField, {
   shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
 })(({ theme, data }) => ({
   alignSelf: `stretch`,
   margin: `24px 0px 0px 0px`,
   color: theme.palette['Text']['Secondary'],
   fontStyle: `normal`,
   fontFamily: `Roboto`,
   fontWeight: `400`,
   fontSize: `12px`,
   letterSpacing: `0.15000000596046448px`,
   textDecoration: `none`,
   lineHeight: `12px`,
   textTransform: `none`,
 }));
 
 const TextFieldStandard1 = styled(TextField, {
   shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
 })(({ theme, data }) => ({
   alignSelf: `stretch`,
   margin: `24px 0px 0px 0px`,
   color: theme.palette['Text']['Secondary'],
   fontStyle: `normal`,
   fontFamily: `Roboto`,
   fontWeight: `400`,
   fontSize: `12px`,
   letterSpacing: `0.15000000596046448px`,
   textDecoration: `none`,
   lineHeight: `12px`,
   textTransform: `none`,
 }));
 
 const Btm = styled('div', {
   shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
 })(({ data }) => ({
   borderRadius: `0px`,
   display: `flex`,
   position: `relative`,
   isolation: `isolate`,
   flexDirection: `column`,
   justifyContent: `flex-start`,
   alignItems: `center`,
   padding: `0px`,
   boxSizing: `border-box`,
   width: data.currentVariant === 'ScreenMobile' ? 'unset' : `349px`,
   margin: `24px 0px 0px 0px`,
   alignSelf: data.currentVariant === 'ScreenMobile' ? `stretch` : 'unset',
 }));
 
 const ButtonContained = styled(Button, {
   shouldForwardProp: (prop) => !['data'].includes(prop.toString()),
 })(({ theme, data }) => ({
   alignSelf: `stretch`,
   margin: `0px`,
   color: theme.palette['Primary']['Contrast'],
   fontStyle: `normal`,
   fontFamily: `Roboto`,
   fontWeight: `500`,
   fontSize: `15px`,
   letterSpacing: `0.46000000834465027px`,
   textDecoration: `none`,
   lineHeight: `26px`,
   textTransform: `uppercase`,
 }));
 
 const Txt1 = styled('div')({
   borderRadius: `0px`,
   display: `flex`,
   position: `relative`,
   isolation: `isolate`,
   flexDirection: `column`,
   justifyContent: `flex-start`,
   alignItems: `center`,
   padding: `0px`,
   boxSizing: `border-box`,
   margin: `24px 0px 0px 0px`,
 });
 
 const HavingTroubleLogging = styled('div')(({ theme }) => ({
   textAlign: `center`,
   whiteSpace: `pre-wrap`,
   fontSynthesis: `none`,
   color: theme.palette['Text']['Primary'],
   fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
   fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
   fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
   fontSize: theme.typography['Typography']['Body 1'].fontSize,
   letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
   lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
   textDecoration: theme.typography['Typography']['Body 1'].textDecoration,
   textTransform: theme.typography['Typography']['Body 1'].textTransform,
   margin: `0px`,
 }));
 
 const Link1 = styled(MUILink)(({ theme }) => ({
   color: theme.palette['Primary']['Main'],
   fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
   fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
   fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
   fontSize: theme.typography['Typography']['Body 1'].fontSize,
   letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
   lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
   textTransform: theme.typography['Typography']['Body 1'].textTransform,
   margin: `4px 0px 0px 0px`,
 }));
 
 const LoremIpsumDisclaimer = styled('div')(({ theme }) => ({
   textAlign: `center`,
   whiteSpace: `pre-wrap`,
   fontSynthesis: `none`,
   color: theme.palette['Text']['Secondary'],
   fontStyle: theme.typography['Typography']['Caption'].fontStyle,
   fontFamily: theme.typography['Typography']['Caption'].fontFamily,
   fontWeight: theme.typography['Typography']['Caption'].fontWeight,
   fontSize: theme.typography['Typography']['Caption'].fontSize,
   letterSpacing: theme.typography['Typography']['Caption'].letterSpacing,
   lineHeight: theme.typography['Typography']['Caption'].lineHeight,
   textDecoration: theme.typography['Typography']['Caption'].textDecoration,
   textTransform: theme.typography['Typography']['Caption'].textTransform,
   width: `230px`,
   margin: `24px 0px 0px 0px`,
 }));
 
 function Authentication3(props) {
   const { data } = useAuthentication3();
   const { session, setSession } = props
 
   return (
     <ScreenDesktop className={props.className} data={data}>
       <LogIn data={data}>
         <Top data={data}>
           <LogInToYourAccount data={data}>
             {`Login`}
           </LogInToYourAccount>
           
         </Top>
         <Sec data={data}>
           <TextFieldStandard
             variant="standard"
             disabled={false}
             size={'medium'}
             label={'User Name'}
             data={data}
           />
           <TextFieldStandard1
             variant="standard"
             disabled={false}
             size={'medium'}
             label={'Password'}
             data={data}
           />
           <Btm data={data}>
             <ButtonContained
               variant="contained"
               disabled={false}
               size={'large'}
               color={'primary'}
               data={data}
               onClick={() => setSession(true)}
             >
               {'Continue To Agendar'}
             </ButtonContained>
             <Txt1>
               <HavingTroubleLogging>
                 {`Having trouble logging in?`}
               </HavingTroubleLogging>
               <Link1 href="#" underline="always">
                 Forgot Password
               </Link1>
             </Txt1>
           </Btm>
         </Sec>
       </LogIn>
     </ScreenDesktop>
   );
 }
 
 export default Authentication3;
 